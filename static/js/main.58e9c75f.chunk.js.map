{"version":3,"sources":["Calculator/index.js","index.js"],"names":["math","create","all","Calculator","useState","operand","setOperand","expression","setExpression","handleNum","digit","target","value","copy","opVal","match","opLength","reduce","total","num","length","alert","handleOperator","operator","updatedExpression","validatedOperand","checkOperand","push","checkedOperand","endsWith","startsWith","getResult","lastOperand","finalExpression","join","res","evaluate","format","precision","toString","error","console","log","className","type","onClick","slice","newOperand","pop","substring","includes","updatedOperand","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58e9c75f.chunk.js","sourcesContent":["import React, { useState } from 'react'; // import hook to store component state\nimport { create, all } from 'mathjs';    // import Math.js to evaluate expressions\nimport '../Calculator/Calculator.css';   // import styles\n\n/**\n * Math.js Documentation:\n * https://mathjs.org/docs/index.html\n */\nconst math = create(all); // instantiate math to parse/eval expression strings\n\nexport default function Calculator() {\n\n    // initial state\n    const [operand, setOperand] = useState('');\n    const [expression, setExpression] = useState([]);\n\n    // reset all state hooks\n    const handleClearAll = () => {\n        setOperand('');\n        setExpression([]);\n    }\n\n    // reset current operand state\n    const handleClearOperand = () => {\n        setOperand('');\n    }\n\n    // user clicks a number button\n    // params: deconstruct event.target.value as digit\n    const handleNum = ({ target: { value: digit } }) => {\n        let copy = operand;\n        copy += digit;\n\n        // returns array of digit strings\n        // if decimal point, opVal has two elements ( digits before and after decimal)\n        const opVal = copy.match(/\\d+/g); // strips any parentheses and negative sign\n\n        // get total number of digits regardless of decimal point\n        const opLength = opVal.reduce((total, num) => {\n            return total + num.length;\n        }, 0);\n\n        if (opVal[1] && opVal[1].length > 10) {\n            alert('max digits after decimal is 10');\n        } else if (opLength > 15) {\n            alert('max number of digits is 15');\n        } else if (operand !== '0') {\n            setOperand(copy);\n        }\n    }\n\n    // toggle current operand to be negative or positive\n    const toggleNegative = () => {\n        const isNegative = operand.startsWith('(-');\n\n        if (isNegative) {\n\n            // if operand only contains '(-', reset operand to empty string\n            if (operand === '(-') {\n                setOperand('');\n\n            // operand is some form of '(-XY.Z' or '(-XY.Z)'\n            } else {\n\n                // remove negative sign and any parantheses\n                operand.endsWith(')') ? setOperand(operand.substring(2, operand.length - 1))\n                                      : setOperand(operand.substring(2));\n            }\n\n        // number is positive\n        } else {\n\n            // prepend '(-' to operand and update state\n            setOperand(`(-${operand}`);\n        }\n    }\n\n    // add a decimal point to current operand\n    const handleDecimal = () => {\n        if (operand.includes('.')) { // operand already contains decimal point\n            alert('invalid format');\n        } else {\n            let updatedOperand = operand;              // copy state\n            if (!operand.length || operand === '(-') { // if operand empty or opens with negative\n                updatedOperand += '0';                 // pad with a zero\n            }\n            updatedOperand += '.';      // append decimal point\n            setOperand(updatedOperand); // update state\n        }\n    }\n\n    // validate operand, pad with any needed chars, and push to expression\n    // params: deconstruct event.target.value as operator\n    const handleOperator = ({ target: { value: operator } }) => {\n        const updatedExpression = [...expression]; // copy state\n        const validatedOperand = checkOperand();   // check operand\n\n        // if valid operand, push it and operator to expression array\n        if (validatedOperand) {\n            updatedExpression.push(validatedOperand);\n            updatedExpression.push(operator);\n            setExpression(updatedExpression);\n\n        // operand is empty or has no numbers, check expression\n        // if it contains elements, replace the previous operator with new one\n        } else if (expression.length) {\n            updatedExpression[updatedExpression.length - 1] = operator;\n            setExpression(updatedExpression);\n        }\n        setOperand('');\n    }\n\n    // after user clicks operator or '=', check the operand and add any needed closing chars\n    // if operand is valid, closes any open parentheses and adds zero if ends in decimal\n    // else returns undefined\n    const checkOperand = () => {\n\n        // make sure there is something to work with\n        if (operand && operand !== '(-') {\n            let checkedOperand = operand;\n\n            // append zero if operand ends with decimal\n            if (checkedOperand.endsWith('.')) {\n                checkedOperand += '0';\n            }\n\n            // append ')' if operand is negative and it isn't already closed\n            if (checkedOperand.startsWith('(-') && !checkedOperand.endsWith(')')) {\n                checkedOperand += ')';\n            }\n            return checkedOperand;\n        }\n        return undefined;\n    }\n\n    // user clicks equals sign to evaluate expression\n    const handleEquals = () => {\n        const res = getResult();\n\n        if (res) {\n            setExpression([]);\n            setOperand(res);\n        }\n    }\n\n    // calculate expression result and return for display\n    const getResult = () => {\n        const lastOperand = checkOperand();\n        const finalExpression = expression.join('') + lastOperand;\n\n        if (lastOperand) { // undefined if operand is empty\n            try {\n                let res = math.evaluate(finalExpression);\n                res = math.format(res, {precision: 10});\n                return res.toString();\n            } catch (error) {\n                console.log('invalid expression');\n            }\n        }\n        return '';\n    }\n\n    // delete from expression\n    const handleBackspace = () => {\n\n        // delete from operand if it isn't empty\n        if (operand.length) {\n            switch (operand) {\n                case '(-':\n                case '0.':\n                    setOperand('');\n                    break;\n                case '(-0.':\n                    setOperand('(-');\n                    break\n                default:\n                    setOperand(operand.slice(0, -1));\n                    break;\n            }\n\n        // else update expression\n        } else if (expression.length) {\n            const updatedExpression = [...expression].slice(0, -1); // remove operator\n            const newOperand = updatedExpression.pop();             // last operand becomes current operand\n\n            setOperand(newOperand);\n            setExpression(updatedExpression);\n        }\n    }\n\n    return (\n        <>\n            <p className='input'>{expression.join(' ') + ' ' + operand}</p>\n            <p className='output'>{getResult()}</p>\n\n            <button className='operator-btn' type='button' onClick={handleBackspace}>BKSPC</button>\n            <button className='clear-btn' type='button' onClick={handleClearOperand}>C</button>\n            <button className='clear-btn' type='button' onClick={handleClearAll}>AC</button>\n\n            <button className='operator-btn' type='button' onClick={handleOperator} value='/'>÷</button>\n\n            <button className='numpad-btn' type='button' onClick={handleNum} value='7'>7</button>\n            <button className='numpad-btn' type='button' onClick={handleNum} value='8'>8</button>\n            <button className='numpad-btn' type='button' onClick={handleNum} value='9'>9</button>\n\n            <button className='operator-btn' type='button' onClick={handleOperator} value='*'>×</button>\n\n            <button className='numpad-btn' type='button' onClick={handleNum} value='4'>4</button>\n            <button className='numpad-btn' type='button' onClick={handleNum} value='5'>5</button>\n            <button className='numpad-btn' type='button' onClick={handleNum} value='6'>6</button>\n\n            <button className='operator-btn' type='button' onClick={handleOperator} value='-'>-</button>\n\n            <button className='numpad-btn' type='button' onClick={handleNum} value='1'>1</button>\n            <button className='numpad-btn' type='button' onClick={handleNum} value='2'>2</button>\n            <button className='numpad-btn' type='button' onClick={handleNum} value='3'>3</button>\n\n            <button className='operator-btn' type='button' onClick={handleOperator} value='+'>+</button>\n\n            <button className='numpad-btn' type='button' onClick={toggleNegative}>+/-</button>\n            <button className='numpad-btn' type='button' onClick={handleNum} value='0'>0</button>\n\n            <button className='numpad-btn' type='button' onClick={handleDecimal} value='.'>.</button>\n            <button className='operator-btn' type='button' onClick={handleEquals}>=</button>\n        </>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './Calculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}